#+TITLE: My config of Doom Emacs
#+AUTHOR: Gustavo L. Freitas
#+DESCRIPTION: Config of Doom Emacs in org-mode
#+STARTUP: fold

* My Doom-Emacs Config
This is part of my dotfiles in https://github.com/gussdelf/dotfiles.
** Init.el
*** Lexical bind
#+srcname: lexical-bind-init-el
#+BEGIN_SRC emacs-lisp :tangle "init.el" :noweb no-export :comments no
;;; init.el -*- lexical-binding: t; -*-
#+END_SRC

*** The file
#+BEGIN_SRC emacs-lisp :tangle "init.el" :noweb no-export :comments no
(doom! :input
       <<doom-input>>

       :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :os
       <<doom-os>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       :config
       <<doom-config>>
       )
#+END_SRC

*** doom-input
#+name: doom-input
#+BEGIN_SRC emacs-lisp
;;chinese
;;japanese
;;layout            ; auie,ctsrnm is the superior home row
#+END_SRC

*** doom-completion
#+name: doom-completion
#+BEGIN_SRC emacs-lisp
(company +childframe)           ; the ultimate code completion backend
;;helm              ; the *other* search engine for love and life
;;ido               ; the other *other* search engine...
;; (ivy +icons +prescient)        ; a search engine for love and life
(vertico +icons)           ; the search engine of the future
#+END_SRC

*** doom-ui
#+name: doom-ui
#+BEGIN_SRC emacs-lisp
;;deft              ; notational velocity for Emacs
doom              ; what makes DOOM look the way it does
doom-dashboard    ; a nifty splash screen for Emacs
doom-quit         ; DOOM quit-message prompts when you quit Emacs
(emoji +unicode +ascii +github)  ; 🙂
hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
hydra
;; indent-guides     ; highlighted indent columns
(ligatures  +iosevka)        ; ligatures and symbols to make your code pretty again
;;minimap           ; show a map of the code on the side
(modeline +light)          ; snazzy, Atom-inspired modeline, plus API
nav-flash         ; blink cursor line after big motions
;;neotree           ; a project drawer, like NERDTree for vim
ophints           ; highlight the region an operation acts on
(popup +defaults +all)   ; tame sudden yet inevitable temporary windows
;; tabs              ; a tab bar for Emacs
(treemacs +lsp)          ; a project drawer, like neotree but cooler
;; unicode           ; extended unicode support for various languages
vc-gutter         ; vcs diff in the fringe
;; vi-tilde-fringe   ; fringe tildes to mark beyond EOB
(window-select +numbers)     ; visually switch windows
workspaces        ; tab emulation, persistence & separate workspaces
zen               ; distraction-free coding or writing
#+END_SRC

*** doom-editor
#+name: doom-editor
#+BEGIN_SRC emacs-lisp
(evil +everywhere); come to the dark side, we have cookies
file-templates    ; auto-snippets for empty files
fold              ; (nigh) universal code folding
(format +onsave)  ; automated prettiness
;;god               ; run Emacs commands without modifier keys
;;lispy             ; vim for lisp, for people who don't like vim
multiple-cursors  ; editing in many places at once
;;objed             ; text object editing for the innocent
;;parinfer          ; turn lisp into python, sort of
;;rotate-text       ; cycle region at point between text candidates
snippets          ; my elves. They type so I don't have to
word-wrap         ; soft wrapping with language-aware indent
#+END_SRC

*** doom-emacs
#+name: doom-emacs
#+BEGIN_SRC emacs-lisp
(dired +icons)                          ; making dired pretty [functional]
electric          ; smarter, keyword-based electric-indent
(ibuffer +icons)         ; interactive buffer management
(undo +tree)              ; persistent, smarter undo for your inevitable mistakes
vc                ; version-control and Emacs, sitting in a tree
#+END_SRC

*** doom-term
#+name: doom-term
#+BEGIN_SRC emacs-lisp
eshell            ; the elisp shell that works everywhere
;;shell             ; simple shell REPL for Emacs
;;term              ; basic terminal emulator for Emacs
vterm             ; the best terminal emulation in Emacs
#+END_SRC

*** doom-checkers
#+name: doom-checkers
#+BEGIN_SRC emacs-lisp
(syntax +childframe)             ; tasing you for every semicolon you forget
;;(spell +aspell) ; tasing you for misspelling mispelling
;;grammar           ; tasing grammar mistake every you make
#+END_SRC

*** doom-tools
#+name: doom-tools
#+BEGIN_SRC emacs-lisp
;;ansible
;;debugger          ; FIXME stepping through code, to help you add bugs
;;direnv
docker
editorconfig      ; let someone else argue about tabs vs spaces
;;ein               ; tame Jupyter notebooks with emacs
(eval +overlay)     ; run code, run (also, repls)
;;gist              ; interacting with github gists
lookup              ; navigate your code and its documentation
lsp               ; M-x vscode
(magit +forge)            ; a git porcelain for Emacs
make              ; run make tasks from Emacs
pass              ; password manager for nerds
pdf               ; pdf enhancements
;;prodigy           ; FIXME managing external services & code builders
rgb               ; creating color strings
;;taskrunner        ; taskrunner for all your projects
;;terraform         ; infrastructure as code
;;tmux              ; an API for interacting with tmux
;;upload            ; map local to remote projects via ssh/ftp
#+END_SRC

*** doom-os
#+name: doom-os
#+BEGIN_SRC emacs-lisp
;;(:if IS-MAC macos)  ; improve compatibility with macOS
tty               ; improve the terminal Emacs experience
#+END_SRC

*** doom-lang
#+name: doom-lang
#+BEGIN_SRC emacs-lisp
;;agda              ; types of types of types of types...
;;beancount         ; mind the GAAP
(cc +lsp)               ; C > C++ == 1
;;clojure           ; java with a lisp
common-lisp       ; if you've seen one lisp, you've seen them all
;;coq               ; proofs-as-programs
;;crystal           ; ruby at the speed of c
;;csharp            ; unity, .NET, and mono shenanigans
;;data              ; config/data formats
;;(dart +flutter)   ; paint ui and not much else
;;dhall
;;elixir            ; erlang done right
;;elm               ; care for a cup of TEA?
emacs-lisp        ; drown in parentheses
;;erlang            ; an elegant language for a more civilized age
;;ess               ; emacs speaks statistics
;;factor
;;faust             ; dsp, but you get to keep your soul
;;fsharp            ; ML stands for Microsoft's Language
;;fstar             ; (dependent) types and (monadic) effects and Z3
;;gdscript          ; the language you waited for
(go +lsp)         ; the hipster dialect
;;(haskell +lsp)    ; a language that's lazier than I am
;;hy                ; readability of scheme w/ speed of python
;;idris             ; a language you can depend on
json              ; At least it ain't XML
;;(java +meghanada +lsp) ; the poster child for carpal tunnel syndrome
(javascript +lsp)        ; all(hope(abandon(ye(who(enter(here))))))
;;julia             ; a better, faster MATLAB
;;kotlin            ; a better, slicker Java(Script)
(latex +lsp)             ; writing papers in Emacs has never been so fun
;;lean              ; for folks with too much to prove
;;ledger            ; be audit you can be
(lua +lsp)               ; one-based indices? one-based indices
markdown         ; writing docs for people to ignore
;;nim               ; python + lisp at the speed of c
nix               ; I hereby declare "nix geht mehr!"
;;ocaml             ; an objective camel
(org +pretty +roam2 +pomodoro +present)               ; organize your plain life in plain text
(php +lsp)               ; perl's insecure younger brother
;;plantuml          ; diagrams for confusing people more
;;purescript        ; javascript, but functional
(python +lsp +pyright)           ; beautiful is better than ugly
;;qt                ; the 'cutest' gui framework ever
;;racket            ; a DSL for DSLs
;;raku              ; the artist formerly known as perl6
;;rest              ; Emacs as a REST client
;;rst               ; ReST in peace
(ruby +rails +lsp)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
(rust +lsp)             ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala             ; java, but good
;;(scheme +guile)   ; a fully conniving family of lisps
(sh +fish +lsp)                ; she sells {ba,z,fi}sh shells on the C xor
;;sml
;;solidity          ; do you need a blockchain? No.
;;swift             ; who asked for emoji variables?
;;terra             ; Earth and Moon in alignment for performance.
web               ; the tubes
;;yaml              ; JSON, but readable
;;zig               ; C, but simpler
#+END_SRC

*** doom-email
#+name: doom-email
#+BEGIN_SRC emacs-lisp
;; (mu4e +org +gmail)
;;notmuch
;;(wanderlust +gmail)
#+END_SRC

*** doom-app
#+name: doom-app
#+BEGIN_SRC emacs-lisp
;;calendar
emms
everywhere        ; *leave* Emacs!? You must be joking
;;irc               ; how neckbeards socialize
;;(rss +org)        ; emacs as an RSS reader
;;twitter           ; twitter client https://twitter.com/vnought
#+END_SRC

*** doom-config
#+name: doom-config
#+BEGIN_SRC emacs-lisp
;; literate
(default +bindings +smartparens)
#+END_SRC

** Packages.el
*** Packages
#+srcname: packages
#+BEGIN_SRC emacs-lisp :tangle "packages.el" :noweb no-export :comments no
(unpin! (:ui doom))
(package! tree-sitter)
(package! tree-sitter-langs)
(package! theme-magic)
(package! spacemacs-theme)
(package! password-generator)
(package! screenshot :recipe (:host github :repo "tecosaur/screenshot"))
#+END_SRC

** Config.el
*** Lexical bind
#+srcname: lexical-bind-config-el
#+BEGIN_SRC emacs-lisp :tangle yes
;;; config.el -*- lexical-binding: t; -*-
#+END_SRC

*** Profile
**** Identify
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
#+srcname: identify
#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-full-name "Gustavo de Lima Freitas"
      user-mail-address "gussdelf@gmail.com")
#+END_SRC

**** Org-mode dir
#+srcname: org-dir
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-directory "~/Docs/org/")
#+END_SRC

*** Extra packages
**** Tree-sitter
Tree-sitter is a parser generator tool and an incremental parsing library. It
can build a concrete syntax tree for a source file and efficiently update the
syntax tree as the source file is edited.
#+srcname: tree-sitter
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package! tree-sitter
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+END_SRC

**** Theme-magic
#+srcname: theme-magic
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package! theme-magic
  :commands theme-magic-from-emacs
  :config
  (defadvice! theme-magic--auto-extract-16-doom-colors ()
    :override #'theme-magic--auto-extract-16-colors
    (list
     (face-attribute 'default :background)
     (doom-color 'error)
     (doom-color 'success)
     (doom-color 'type)
     (doom-color 'keywords)
     (doom-color 'constants)
     (doom-color 'functions)
     (face-attribute 'default :foreground)
     (face-attribute 'shadow :foreground)
     (doom-blend 'base8 'error 0.1)
     (doom-blend 'base8 'success 0.1)
     (doom-blend 'base8 'type 0.1)
     (doom-blend 'base8 'keywords 0.1)
     (doom-blend 'base8 'constants 0.1)
     (doom-blend 'base8 'functions 0.1)
     (face-attribute 'default :foreground))))
#+END_SRC

**** Screenshot
#+srcname: screenshot
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package! screenshot
  :defer t)
#+END_SRC

*** Magit
**** Pretty-magit
#+srcname: pretty-magit
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'dash)

(defmacro pretty-magit (WORD ICON PROPS &optional NO-PROMPT?)
  "Replace sanitized WORD with ICON, PROPS and by default add to prompts."
  `(prog1
       (add-to-list 'pretty-magit-alist
                    (list (rx bow (group ,WORD (eval (if ,NO-PROMPT? "" ":"))))
                          ,ICON ',PROPS))
     (unless ,NO-PROMPT?
       (add-to-list 'pretty-magit-prompt (concat ,WORD ": ")))))

(setq pretty-magit-alist nil)
(setq pretty-magit-prompt nil)
(pretty-magit "Feature" ?🐉 (:foreground "slate gray" :height 1.2))
(pretty-magit "Add"     ? (:foreground "#375E97" :height 1.2))
(pretty-magit "Fix"     ? (:foreground "#FB6542" :height 1.2))
(pretty-magit "Clean"   ? (:foreground "#FFBB00" :height 1.2))
(pretty-magit "Docs"    ? (:foreground "#3F681C" :height 1.2))
(pretty-magit "master"  ? (:box t :height 1.2) t)
(pretty-magit "origin"  ? (:box t :height 1.2) t)

(defun add-magit-faces ()
  "Add face properties and compose symbols for buffer from pretty-magit."
  (interactive)
  (with-silent-modifications
    (--each pretty-magit-alist
      (-let (((rgx icon props) it))
        (save-excursion
          (goto-char (point-min))
          (while (search-forward-regexp rgx nil t)
            (compose-region
             (match-beginning 1) (match-end 1) icon)
            (when props
              (add-face-text-property
               (match-beginning 1) (match-end 1) props))))))))

(advice-add 'magit-status :after 'add-magit-faces)
(advice-add 'magit-refresh-buffer :after 'add-magit-faces)
#+END_SRC

*** Some ui fix
**** Fonts
#+srcname: fonts
#+BEGIN_SRC emacs-lisp :tangle yes
(setq doom-font (font-spec :family "Iosevka Nerd Font" :size 18 :height 'medium)
      doom-big-font (font-spec :family "Meslo LG L Nerd Font" :size 18 :height 'medium)
      doom-variable-pitch-font (font-spec :family "Overpass Nerd Font")
      doom-unicode-font (font-spec :family "JuliaMono")
      doom-serif-font (font-spec :family "BlexMono Nerd Font" :weight 'light))
#+END_SRC

**** Theme
#+srcname: theme
#+BEGIN_SRC emacs-lisp :tangle yes
(setq doom-theme 'doom-gruvbox)
(setq doom-gruvbox-dark-variant "hard")
#+END_SRC

**** Dashboard
#+name: splash-image
#+BEGIN_SRC emacs-lisp :tangle no
;; REVIEW
;; (defvar fancy-splash-image-template
;;   (expand-file-name "misc/splash-images/emacs-e.svg" doom-private-dir)
;;   "Default template svg used for the splash image, with substitutions from ")

;; (defvar fancy-splash-sizes
;;   `((:height 150 :min-height 50 :padding (0 . 2))
;;     (:height 126 :min-height 42 :padding (2 . 4))
;;     (:height 105  :min-height 35 :padding (3 . 3))
;;     (:height 84  :min-height 28 :padding (3 . 3))
;;     (:height 60 :min-height 20 :padding (2 . 2))
;;     (:height 45  :min-height 15 :padding (2 . 1))
;;     (:height 30  :min-height 10 :padding (1 . 0))
;;     (:height 1   :min-height 0  :padding (0 . 0)))
;;   "list of plists with the following properties
;;   :height the height of the image
;;   :min-height minimum `frame-height' for image
;;   :padding `+doom-dashboard-banner-padding' (top . bottom) to apply
;;   :template non-default template file
;;   :file file to use instead of template")

;; (defvar fancy-splash-template-colours
;;   '(("$colour1" . keywords) ("$colour2" . type) ("$colour3" . base5) ("$colour4" . base8))
;;   "list of colour-replacement alists of the form (\"$placeholder\" . 'theme-colour) which applied the template")

;; (unless (file-exists-p (expand-file-name "theme-splashes" doom-cache-dir))
;;   (make-directory (expand-file-name "theme-splashes" doom-cache-dir) t))

;; (defun fancy-splash-filename (theme-name height)
;;   (expand-file-name (concat (file-name-as-directory "theme-splashes")
;;                             theme-name
;;                             "-" (number-to-string height) ".svg")
;;                     doom-cache-dir))

;; (defun fancy-splash-clear-cache ()
;;   "Delete all cached fancy splash images"
;;   (interactive)
;;   (delete-directory (expand-file-name "theme-splashes" doom-cache-dir) t)
;;   (message "Cache cleared!"))

;; (defun fancy-splash-generate-image (template height)
;;   "Read TEMPLATE and create an image if HEIGHT with colour substitutions as
;;    described by `fancy-splash-template-colours' for the current theme"
;;   (with-temp-buffer
;;     (insert-file-contents template)
;;     (re-search-forward "$height" nil t)
;;     (replace-match (number-to-string height) nil nil)
;;     (dolist (substitution fancy-splash-template-colours)
;;       (goto-char (point-min))
;;       (while (re-search-forward (car substitution) nil t)
;;         (replace-match (doom-color (cdr substitution)) nil nil)))
;;     (write-region nil nil
;;                   (fancy-splash-filename (symbol-name doom-theme) height) nil nil)))

;; (defun fancy-splash-generate-images ()
;;   "Perform `fancy-splash-generate-image' in bulk"
;;   (dolist (size fancy-splash-sizes)
;;     (unless (plist-get size :file)
;;       (fancy-splash-generate-image (or (plist-get size :template)
;;                                        fancy-splash-image-template)
;;                                    (plist-get size :height)))))

;; (defun ensure-theme-splash-images-exist (&optional height)
;;   (unless (file-exists-p (fancy-splash-filename
;;                           (symbol-name doom-theme)
;;                           (or height
;;                               (plist-get (car fancy-splash-sizes) :height))))
;;     (fancy-splash-generate-images)))

;; (defun get-appropriate-splash ()
;;   (let ((height (frame-height)))
;;     (cl-some (lambda (size) (when (>= height (plist-get size :min-height)) size))
;;              fancy-splash-sizes)))

;; (setq fancy-splash-last-size nil)
;; (setq fancy-splash-last-theme nil)
;; (defun set-appropriate-splash (&rest _)
;;   (let ((appropriate-image (get-appropriate-splash)))
;;     (unless (and (equal appropriate-image fancy-splash-last-size)
;;                  (equal doom-theme fancy-splash-last-theme)))
;;     (unless (plist-get appropriate-image :file)
;;       (ensure-theme-splash-images-exist (plist-get appropriate-image :height)))
;;     (setq fancy-splash-image
;;           (or (plist-get appropriate-image :file)
;;               (fancy-splash-filename (symbol-name doom-theme) (plist-get appropriate-image :height))))
;;     (setq +doom-dashboard-banner-padding (plist-get appropriate-image :padding))
;;     (setq fancy-splash-last-size appropriate-image)
;;     (setq fancy-splash-last-theme doom-theme)
;;     (+doom-dashboard-reload)))

;; (add-hook 'window-size-change-functions #'set-appropriate-splash)
;; (add-hook 'doom-load-theme-hook #'set-appropriate-splash)

#+END_SRC

#+name: splash-phrases
#+BEGIN_SRC emacs-lisp :tangle no
;; REVIEW
;; (defvar splash-phrase-source-folder
;;   (expand-file-name "misc/splash-phrases" doom-private-dir)
;;   "A folder of text files with a fun phrase on each line.")

;; (defvar splash-phrase-sources
;;   (let* ((files (directory-files splash-phrase-source-folder nil "\\.txt\\'"))
;;          (sets (delete-dups (mapcar
;;                              (lambda (file)
;;                                (replace-regexp-in-string "\\(?:-[0-9]+-\\w+\\)?\\.txt" "" file))
;;                              files))))
;;     (mapcar (lambda (sset)
;;               (cons sset
;;                     (delq nil (mapcar
;;                                (lambda (file)
;;                                  (when (string-match-p (regexp-quote sset) file)
;;                                    file))
;;                                files))))
;;             sets))
;;   "A list of cons giving the phrase set name, and a list of files which contain phrase components.")

;; (defvar splash-phrase-set
;;   (nth (random (length splash-phrase-sources)) (mapcar #'car splash-phrase-sources))
;;   "The default phrase set. See `splash-phrase-sources'.")

;; (defun splase-phrase-set-random-set ()
;;   "Set a new random splash phrase set."
;;   (interactive)
;;   (setq splash-phrase-set
;;         (nth (random (1- (length splash-phrase-sources)))
;;              (cl-set-difference (mapcar #'car splash-phrase-sources) (list splash-phrase-set))))
;;   (+doom-dashboard-reload t))

;; (defvar splase-phrase--cache nil)

;; (defun splash-phrase-get-from-file (file)
;;   "Fetch a random line from FILE."
;;   (let ((lines (or (cdr (assoc file splase-phrase--cache))
;;                    (cdar (push (cons file
;;                                      (with-temp-buffer
;;                                        (insert-file-contents (expand-file-name file splash-phrase-source-folder))
;;                                        (split-string (string-trim (buffer-string)) "\n")))
;;                                splase-phrase--cache)))))
;;     (nth (random (length lines)) lines)))

;; (defun splash-phrase (&optional set)
;;   "Construct a splash phrase from SET. See `splash-phrase-sources'."
;;   (mapconcat
;;    #'splash-phrase-get-from-file
;;    (cdr (assoc (or set splash-phrase-set) splash-phrase-sources))
;;    " "))

;; (defun doom-dashboard-phrase ()
;;   "Get a splash phrase, flow it over multiple lines as needed, and make fontify it."
;;   (mapconcat
;;    (lambda (line)
;;      (+doom-dashboard--center
;;       +doom-dashboard--width
;;       (with-temp-buffer
;;         (insert-text-button
;;          line
;;          'action
;;          (lambda (_) (+doom-dashboard-reload t))
;;          'face 'doom-dashboard-menu-title
;;          'mouse-face 'doom-dashboard-menu-title
;;          'help-echo "Random phrase"
;;          'follow-link t)
;;         (buffer-string))))
;;    (split-string
;;     (with-temp-buffer
;;       (insert (splash-phrase))
;;       (setq fill-column (min 70 (/ (* 2 (window-width)) 3)))
;;       (fill-region (point-min) (point-max))
;;       (buffer-string))
;;     "\n")
;;    "\n"))

;; (defadvice! doom-dashboard-widget-loaded-with-phrase ()
;;   :override #'doom-dashboard-widget-loaded
;;   (setq line-spacing 0.2)
;;   (insert
;;    "\n\n"
;;    (propertize
;;     (+doom-dashboard--center
;;      +doom-dashboard--width
;;      (doom-display-benchmark-h 'return))
;;     'face 'doom-dashboard-loaded)
;;    "\n"
;;    (doom-dashboard-phrase)
;;    "\n"))

#+END_SRC

#+srcname: dashboard-widget-footer
#+BEGIN_SRC emacs-lisp :tangle yes
(defun doom-dashboard-widget-footer ()
  (insert
   "\n"
   (+doom-dashboard--center
    (- +doom-dashboard--width 2)
    (with-temp-buffer
      (insert-text-button (or (all-the-icons-octicon "octoface" :face 'doom-dashboard-footer-icon :height 1.3 :v-adjust -0.15)
                              (propertize "github" 'face 'doom-dashboard-footer))
                          'action (lambda (_) (browse-url "https://github.com/gussdelf/"))
                          'follow-link t
                          'help-echo "Open my github page")
      (buffer-string)))
   "\n"))
#+END_SRC

#+srcname: dashboard
#+BEGIN_SRC emacs-lisp :tangle yes
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(add-hook! '+doom-dashboard-mode-hook (hide-mode-line-mode 1)(hl-line-mode -1))
(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))

(setq fancy-splash-image (expand-file-name "misc/splash-images/skull.svg" doom-private-dir))
(setq +doom-dashboard-banner-padding '(0 . 0))
#+END_SRC

**** Modeline
#+srcname: doom-modeline
#+BEGIN_SRC emacs-lisp :tangle yes
(cond ((featurep! :ui modeline) (setq doom-modeline-major-mode-icon t
              doom-modeline-persp-name t)))
#+END_SRC

**** Italic to Slant
#+srcname: italic-to-slant
#+BEGIN_SRC emacs-lisp :tangle yes
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+END_SRC

**** Miscellaneous
***** Line number
This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.
#+srcname: line-numbers-type
#+BEGIN_SRC emacs-lisp :tangle yes
(setq display-line-numbers-type `relative)
#+END_SRC

***** Default buffer name
#+srcname: default-buffer-name
#+BEGIN_SRC emacs-lisp :tangle yes
(setq doom-fallback-buffer-name "Doom"
      +doom-dashboard-name "Doom")
#+END_SRC

***** Cursor colors
#+srcname: cursor-colors
#+BEGIN_SRC emacs-lisp :tangle yes
(setq evil-normal-state-cursor `(box "orange")
      ;; evil-insert-state-cursor `(box "red")
      evil-visual-state-cursor `(hbar)
      evil-operator-state-cursor `(hbar)
      evil-replace-state-cursor `(hbar)
      evil-motion-state-cursor `(box)
      evil-emacs-state-cursor `(box))
#+END_SRC

***** Remove emojify hook
#+srcname: rm-emojify-hook
#+BEGIN_SRC emacs-lisp :tangle yes
(remove-hook 'doom-first-buffer-hook #'global-emojify-mode)
#+END_SRC

***** Add emojis for pretty magit
#+begin_src emacs-lisp :tangle yes
(add-hook 'magit-mode-hook #'emojify-mode)
#+end_src

***** Unpretty
Disable prettify-symbols mode(i im not a big fan).
#+srcname: unprettify
#+BEGIN_SRC emacs-lisp :tangle yes
(defun unprettify ()
  "This function just disable prettify-symbols-mode."
  (global-prettify-symbols-mode -1)
  )
(add-hook 'buffer-list-update-hook 'unprettify)
#+END_SRC

***** Disable warnings in minibuffer
#+srcname: disable-warnings-minibuffer
#+BEGIN_SRC emacs-lisp :tangle yes
(defun my-command-error-function (data context caller)
  "Ignore the buffer-read-only, beginning-of-buffer,
end-of-buffer signals; pass the rest to the default handler."
  (when (not (memq (car data) '(buffer-read-only
                                beginning-of-buffer
                                end-of-buffer)))
    (command-error-default-function data context caller)))

(setq command-error-function #'my-command-error-function)
#+END_SRC

*** Writeroom
**** zoom
#+srcname: zen-text-scale
#+BEGIN_SRC emacs-lisp :tangle yes
(setq +zen-text-scale 1.0)
#+END_SRC

*** Org
**** Org-ellipsis
#+srcname: org-ellipsis
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-ellipsis "  ")
#+END_SRC

**** +org-pretty-mode
#+srcname: org-pretty-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'org-mode-hook #'+org-pretty-mode)
#+END_SRC

**** org-superstar
#+srcname: org-superstar-headline
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-superstar-headline-bullets-list
      '("α" "β" "γ" "δ" "ε" "ς" "ζ" "η" "θ"))
#+END_SRC

**** Make headings(and src blocks) a little more beatiful
#+srcname: custom-headings-and-src-blocks
#+BEGIN_SRC emacs-lisp :tangle yes
(custom-set-faces!
  `(outline-1 :slant italic :background ,(doom-color 'bg-alt))
  `(outline-2 :slant italic :background ,(doom-color 'bg-alt))
  `(outline-3 :slant italic :background ,(doom-color 'bg-alt))
  `(outline-4 :slant italic :background ,(doom-color 'bg-alt))
  `(outline-5 :slant italic :background ,(doom-color 'bg-alt))
  `(outline-6 :slant italic :background ,(doom-color 'bg-alt))
  `(outline-7 :slant italic :background ,(doom-color 'bg-alt))
  `(outline-8 :slant italic :background ,(doom-color 'bg-alt))
  `(outline-9 :slant italic :background ,(doom-color 'bg-alt))
  `(org-block-begin-line :slant italic :weight bold :background ,(doom-color 'bg-alt))
  `(org-block-begin-line :slant italic :weight bold :background ,(doom-color 'bg-alt))
  `(org-block :background ,(doom-color 'bg-alt))
  )
#+END_SRC

**** Org-fontify
#+srcname: org-fontify
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-fontify-quote-and-verse-blocks t)
#+END_SRC

**** Disable hl-line-mode on org-mode
#+srcname: org-hl-line-mode-disable
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook! 'org-mode-hook (hl-line-mode -1))
#+END_SRC

*** Maps
#+srcname: maps
#+BEGIN_SRC emacs-lisp :tangle yes
(map! :leader
      :desc "M-x" "SPC" #'execute-extended-command
      :desc "Find file in project"  "ç"  #'projectile-find-file
      :desc "Manual-entry"  "h ç"  #'man
      (:prefix-map ("i p" . "password")
       :desc "password-generator-simple" "1" #'password-generator-simple
       :desc "password-generator-strong" "2" #'password-generator-strong
       :desc "password-generator-paranoid" "3" #'password-generator-paranoid
       :desc "password-generator-phonetic" "p" #'password-generator-phonetic
       :desc "password-generator-numeric" "n" #'password-generator-numeric
       :desc "password-generator-words" "w" #'password-generator-words
       ))
(map! :n "ç" #'evil-ex)
#+END_SRC

*** Smartparens
#+srcname: smartparens
#+BEGIN_SRC emacs-lisp :tangle yes
(sp-local-pair
 `(org-mode)
 "<<" ">>"
 :actions `(insert))
(sp-local-pair
 `(c-mode)
 "<" ">"
 :actions `(insert))
#+END_SRC

*** Defaults
#+srcname: set-defaults
#+begin_src emacs-lisp :tangle yes
(setq-default indent-tabs-mode t
              tab-width 4)
#+end_src

** Misc
*** Snippets
**** Nome
#+BEGIN_SRC text :tangle snippets/fundamental-mode/nome :mkdirp yes
# -*- mode: snippet -*-
# name: nome
# key: nome
# uuid: nome
# --
Gustavo L. Freitas
#+END_SRC

**** Github
#+BEGIN_SRC text :tangle snippets/fundamental-mode/github :mkdirp yes
# -*- mode: snippet -*-
# name: github
# key: ghub
# uuid: github
# --
https://github.com/gussdelf/`%`$0
#+END_SRC

**** Gitlab
#+BEGIN_SRC text :tangle snippets/fundamental-mode/gitlab :mkdirp yes
# -*- mode: snippet -*-
# name: gitlab
# key: glab
# uuid: gitlab
# --

https://gitlab.com/gussdelf/`%`$0
#+END_SRC

**** Shell
#+BEGIN_SRC text :tangle snippets/org-mode/shell :mkdirp yes
# -*- mode: snippet -*-
# name: shell
# key: sh
# uuid: shell
# --
,#+BEGIN_SRC shell :tangle yes
`%`$0
,#+END_SRC
#+END_SRC

**** Python-src
#+BEGIN_SRC text :tangle snippets/org-mode/python :mkdirp yes
# -*- mode: snippet -*-
# name: python-org
# key: py
# uuid: py-org
# --
,#+BEGIN_SRC python :tangle yes
`%`$0
,#+END_SRC
#+END_SRC

*** Eshell
**** Aliases
#+BEGIN_SRC text :tangle eshell/aliases :mkdirp yes
alias ff find-file $1
alias clear clear-scrollback;
alias c clear-scrollback;
alias ls exa --icons -s type
alias la exa --icons -s type -la
alias ll exa --icons -s type -l
alias g git
#+END_SRC

*** Emms
#+begin_src emacs-lisp :tangle yes
(require 'emms-setup)
(setq emms-source-file-default-directory "~/Files/Music/")
#+end_src
